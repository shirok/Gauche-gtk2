;;;
;;; gdkgllib.stub - gdkglext binding
;;;
;;;  Copyright(C) 2002-2003 by Shiro Kawai (shiro@acm.org)
;;;
;;;  Permission to use, copy, modify, distribute this software and
;;;  accompanying documentation for any purpose is hereby granted,
;;;  provided that existing copyright notices are retained in all
;;;  copies and that this notice is included verbatim in all
;;;  distributions.
;;;  This software is provided as is, without express or implied
;;;  warranty.  In no circumstances the author(s) shall be liable
;;;  for any damages arising out of the use of this software.
;;;

;; mmc: with Cgen, this must come first
"#include \"gauche-gtkgl.h\""

(include "gtkgl.types")

;;=================================================================
;; gdkglconfig.h
;;

(define-enum GDK_GL_MODE_RGB)
(define-enum GDK_GL_MODE_RGBA)
(define-enum GDK_GL_MODE_INDEX)
(define-enum GDK_GL_MODE_SINGLE)
(define-enum GDK_GL_MODE_DOUBLE)
(define-enum GDK_GL_MODE_ACCUM)
(define-enum GDK_GL_MODE_ALPHA)
(define-enum GDK_GL_MODE_DEPTH)
(define-enum GDK_GL_MODE_STENCIL)
(define-enum GDK_GL_MODE_STEREO)
;(define-enum GDK_GL_MODE_MULTISAMPLE)  ;removed @ gtkglext0.7
;(define-enum GDK_GL_MODE_LUMINANCE)    ;removed @ gtkglext0.7

(define-cclass <gdk-gl-config> "GdkGLConfig*"
  "Scm_GdkGLConfigClass"
  ("Scm_GObjectClass")
  (;;(screen         :type <gdk-screen>   :setter #f)
   ;;(colormap       :type <gdk-colormap> :setter #f) ;removed @ gtkglext0.7
   ;;(depth          :type <int>          :setter #f) ;removed @ gtkglext0.7
   (layer-plane    :type <int>          :setter #f)
   (is-rgba        :type <boolean>      :setter #f)
   (is_double_buffered :type <boolean>  :setter #f)
   (as_single_mode :type <boolean>      :setter #f)
   (is_stereo      :type <boolean>      :setter #f)
   (has_alpha      :type <boolean>      :setter #f)
   (has_depth_buffer :type <boolean>    :setter #f)
   (has_stencil_buffer :type <boolean>  :setter #f)
   (has_accum_buffer :type <boolean>    :setter #f)
   ;;(is_multisample :type <boolean>      :setter #f) ;removed @ gtkglext0.7
   ;;(is_luminance   :type <boolean>      :setter #f) ;removed @ gtkglext0.7
   )
  )

(initcode "Scm_GtkRegisterClass(GDK_TYPE_GL_CONFIG, SCM_CLASS_GDK_GL_CONFIG);")

(define-cproc gdk-gl-config-new (attrib::<list>)
  "SCM_RETURN(SCM_MAKE_GDK_GL_CONFIG(gdk_gl_config_new(Scm_ListToGdkGLAttribList(attrib))));")

; gdk-gl-config-new-for-screen - not until GdkScreen support

(define-cproc gdk-gl-config-new-by-mode (mode::<int>)
  (call <gdk-gl-config> "gdk_gl_config_new_by_mode"))

; gdk-gl-config-get-screen - not until GdkScreen support

(define-cproc gdk-gl-config-get-attrib (glconfig::<gdk-gl-config>
                                      attrib::<int>)
  "int value;
  gboolean r = gdk_gl_config_get_attrib(glconfig, attrib, &value);
  SCM_RETURN(Scm_Values2(SCM_MAKE_BOOL(r), Scm_MakeInteger(value)));")

(define-cproc gdk-gl-config-get-colormap (glconfig::<gdk-gl-config>)
  (call <gdk-colormap> "gdk_gl_config_get_colormap"))

(define-cproc gdk-gl-config-get-visual (glconfig::<gdk-gl-config>)
  (call <gdk-visual> "gdk_gl_config_get_visual"))

(define-cproc gdk-gl-config-get-depth (glconfig::<gdk-gl-config>)
  (call <int> "gdk_gl_config_get_depth"))

(define-cproc gdk-gl-config-is-rgba (glconfig::<gdk-gl-config>)
  (call <boolean> "gdk_gl_config_is_rgba"))

(define-cproc gdk-gl-config-is-double-buffered (glconfig::<gdk-gl-config>)
  (call <boolean> "gdk_gl_config_is_double_buffered"))

(define-cproc gdk-gl-config-is-stereo (glconfig::<gdk-gl-config>)
  (call <boolean> "gdk_gl_config_is_stereo"))

(define-cproc gdk-gl-config-has-alpha (glconfig::<gdk-gl-config>)
  (call <boolean> "gdk_gl_config_has_alpha"))

(define-cproc gdk-gl-config-has-depth-buffer (glconfig::<gdk-gl-config>)
  (call <boolean> "gdk_gl_config_has_depth_buffer"))

(define-cproc gdk-gl-config-has-stencil-buffer (glconfig::<gdk-gl-config>)
  (call <boolean> "gdk_gl_config_has_stencil_buffer"))

(define-cproc gdk-gl-config-has-accum-buffer (glconfig::<gdk-gl-config>)
  (call <boolean> "gdk_gl_config_has_accum_buffer"))

;;=================================================================
;; gdkglcontext.h
;;

(define-cclass <gdk-gl-context> "GdkGLContext*"
  "Scm_GdkGLContextClass"
  ("Scm_GObjectClass")
  (;;(gldrawable     :type <gdk-gl-drawable> :setter #f) ;removed @gtkglext0.7
   ;;(glconfig       :type <gdk-gl-config>   :setter #f) ;removed @gtkglext0.7
   ;;(share-list     :type <gdk-gl-context>  :setter #f) ;removed @gtkglext0.7
   ;;(is-direct      :type <boolean>         :setter #f) ;removed @gtkglext0.7
   ;;(render-type    :type <int>             :setter #f) ;removed @gtkglext0.7
   )
  )

(initcode "Scm_GtkRegisterClass(GDK_TYPE_GL_CONTEXT, SCM_CLASS_GDK_GL_CONTEXT);
")

(if "GDKGLEXT_CHECK_VERSION(0, 7, 0)"
(define-cproc gdk-gl-context-new (gldrawable::<gdk-gl-drawable>
                                  share-list::<gdk-gl-context>-or-null
                                  direct::<boolean>
                                  render-type::<int>)
  (call <gdk-gl-context> "gdk_gl_context_new"))
)
(if "!GDKGLEXT_CHECK_VERSION(0, 7, 0)"
(define-cproc gdk-gl-context-new (gldrawable::<gdk-gl-drawable>
                                  glconfig::<gdk-gl-config>
                                  share-list::<gdk-gl-context>-or-null
                                  direct::<boolean>
                                  render-type::<int>)
  (call <gdk-gl-context> "gdk_gl_context_new"))
)

(define-cproc gdk-gl-context-copy! (dst::<gdk-gl-context>
                                    src::<gdk-gl-context>
                                    mask::<ulong>)
  (call <boolean> "gdk_gl_context_copy"))

(define-cproc gdk-gl-context-get-gl-drawable (glcontext::<gdk-gl-context>)
  (call <gdk-gl-drawable> "gdk_gl_context_get_gl_drawable"))

(define-cproc gdk-gl-context-get-gl-config (glcontext::<gdk-gl-context>)
  (call <gdk-gl-config> "gdk_gl_context_get_gl_config"))

(define-cproc gdk-gl-context-is-direct (glcontext::<gdk-gl-context>)
  (call <boolean> "gdk_gl_context_is_direct"))

(define-cproc gdk-gl-context-get-render-type (glcontext::<gdk-gl-context>)
  (call <int> "gdk_gl_context_get_render_type"))

(if "!GDKGLEXT_CHECK_VERSION(0, 7, 0)"
(define-cproc gdk-gl-context-get-colormap (glcontext::<gdk-gl-context>)
  (call <gdk-colormap> "gdk_gl_context_get_colormap"))
)

;;=================================================================
;; gdkgldrawable.h
;;

(define-cclass <gdk-gl-drawable> "GdkGLDrawable*"
  "Scm_GdkGLDrawableClass"
  ("Scm_GObjectClass")
  ()
  )

(initcode "Scm_GtkRegisterClass(GDK_TYPE_GL_DRAWABLE, SCM_CLASS_GDK_GL_DRAWABLE);")

(define-cproc gdk-gl-drawable-make-current (gldrawable::<gdk-gl-drawable>
                                            glcontext::<gdk-gl-context>)
  (call <boolean> "gdk_gl_drawable_make_current"))

(define-cproc gdk-gl-drawable-is-double-buffered (gldrawable::<gdk-gl-drawable>)
  (call <boolean> "gdk_gl_drawable_is_double_buffered"))

(define-cproc gdk-gl-drawable-swap-buffers (gldrawable::<gdk-gl-drawable>)
  (call <void> "gdk_gl_drawable_swap_buffers"))

(define-cproc gdk-gl-drawable-wait-gl (gldrawable::<gdk-gl-drawable>)
  (call <void> "gdk_gl_drawable_wait_gl"))

(define-cproc gdk-gl-drawable-wait-gdk (gldrawable::<gdk-gl-drawable>)
  (call <void> "gdk_gl_drawable_wait_gdk"))

(define-cproc gdk-gl-drawable-gl-begin (gldrawable::<gdk-gl-drawable>
                                        glcontext::<gdk-gl-context>)
  (call <boolean> "gdk_gl_drawable_gl_begin"))

(define-cproc gdk-gl-drawable-gl-end (gldrawable::<gdk-gl-drawable>)
  (call <void> "gdk_gl_drawable_gl_end"))

(define-cproc gdk-gl-drawable-get-gl-config (gldrawable::<gdk-gl-drawable>)
  (call <gdk-gl-config> "gdk_gl_drawable_get_gl_config"))

(define-cproc gdk-gl-drawable-get-size (gldrawable::<gdk-gl-drawable>)
  "gint w, h;
  gdk_gl_drawable_get_size(gldrawable, &w, &h);
  SCM_RETURN(Scm_Values2(SCM_MAKE_INT(w), SCM_MAKE_INT(h)));")

;;=================================================================
;; gdkglfont.h
;;

(define-cproc gdk-gl-font-use-pango-font (font-desc::<pango-font-description>
                                          first::<int>
                                          count::<int>
                                          list-base::<int>)
  (call <pango-font> "gdk_gl_font_use_pango_font"))

;;=================================================================
;; gdkglpixmap.h
;;

(define-cclass <gdk-gl-pixmap> "GdkGLPixmap*"
  "Scm_GdkGLPixmapClass"
  ("Scm_GdkGLDrawableClass" "Scm_GObjectClass")
  (;;(glconfig       :type <gdk-gl-config>   :setter #f);removed @ gtkglext0.7
   (drawable       :type <gdk-drawable>    :setter #f))
  )

(initcode "Scm_GtkRegisterClass(GDK_TYPE_GL_PIXMAP, SCM_CLASS_GDK_GL_PIXMAP);")

(define-cproc gdk-gl-pixmap-new (glconfig::<gdk-gl-config>
                                 pixmap::<gdk-drawable>
                                 attrib::<list>)
  "int *alist = Scm_ListToGdkGLAttribList(attrib);
  SCM_RETURN(SCM_MAKE_GDK_GL_PIXMAP(gdk_gl_pixmap_new(glconfig, pixmap, alist)));")

(define-cproc gdk-gl-pixmap-get-pixmap (glpixmap::<gdk-gl-pixmap>)
  (call <gdk-drawable> "gdk_gl_pixmap_get_pixmap"))

(define-cproc gdk-pixmap-set-gl-capability (pixmap::<gdk-drawable>
                                            glconfig::<gdk-gl-config>
                                            attrib::<list>)
  "int *alist = Scm_ListToGdkGLAttribList(attrib);
  SCM_RETURN(SCM_MAKE_GDK_GL_PIXMAP(gdk_pixmap_set_gl_capability(pixmap, glconfig,alist)));")

(define-cproc gdk-pixmap-usnet-gl-capability (pixmap::<gdk-drawable>)
  (call <void> "gdk_pixmap_unset_gl_capability"))

(define-cproc gdk-pixmap-is-gl-capable (pixmap::<gdk-drawable>)
  (call <boolean> "gdk_pixmap_is_gl_capable"))

(define-cproc gdk-pixmap_get_gl_pixmap (pixmap::<gdk-drawable>)
  (call <gdk-gl-pixmap> "gdk_pixmap_get_gl_pixmap"))

(define-cproc gdk-pixmap_get_gl_drawable (pixmap::<gdk-drawable>)
  (call <gdk-gl-drawable> "gdk_pixmap_get_gl_drawable"))

;;=================================================================
;; gdkglquery.h
;;

(define-cproc gdk-gl-query-extension ()
  (call <boolean> "gdk_gl_query_extension"))

(define-cproc gdk-gl-query-version ()
  "int major = 0, minor = 0;
  gboolean r = gdk_gl_query_version(&major, &minor);
  SCM_RETURN(Scm_Values3(SCM_MAKE_BOOL(r), SCM_MAKE_INT(major), SCM_MAKE_INT(minor)));")

(define-cproc gdk-gl-query-gl-extension (extension::<const-char*>)
  (call <boolean> "gdk_gl_query_gl_extension"))

;;=================================================================
;; gdkgltokens.h
;;

;; Success return value
(define-enum GDK_GL_SUCCESS )

;; Attribute list terminator
(define-enum GDK_GL_ATTRIB_LIST_NONE )

;; Config Attributes
(define-enum GDK_GL_USE_GL )
(define-enum GDK_GL_BUFFER_SIZE )
(define-enum GDK_GL_LEVEL )
(define-enum GDK_GL_RGBA )
(define-enum GDK_GL_DOUBLEBUFFER )
(define-enum GDK_GL_STEREO )
(define-enum GDK_GL_AUX_BUFFERS )
(define-enum GDK_GL_RED_SIZE )
(define-enum GDK_GL_GREEN_SIZE )
(define-enum GDK_GL_BLUE_SIZE )
(define-enum GDK_GL_ALPHA_SIZE )
(define-enum GDK_GL_DEPTH_SIZE )
(define-enum GDK_GL_STENCIL_SIZE )
(define-enum GDK_GL_ACCUM_RED_SIZE )
(define-enum GDK_GL_ACCUM_GREEN_SIZE )
(define-enum GDK_GL_ACCUM_BLUE_SIZE )
(define-enum GDK_GL_ACCUM_ALPHA_SIZE )

(define-enum GDK_GL_X_VISUAL_TYPE )
(define-enum GDK_GL_CONFIG_CAVEAT )
(define-enum GDK_GL_TRANSPARENT_TYPE )
(define-enum GDK_GL_TRANSPARENT_INDEX_VALUE )
(define-enum GDK_GL_TRANSPARENT_RED_VALUE )
(define-enum GDK_GL_TRANSPARENT_GREEN_VALUE )
(define-enum GDK_GL_TRANSPARENT_BLUE_VALUE )
(define-enum GDK_GL_TRANSPARENT_ALPHA_VALUE )
(define-enum GDK_GL_DRAWABLE_TYPE )
(define-enum GDK_GL_RENDER_TYPE )
(define-enum GDK_GL_X_RENDERABLE )
(define-enum GDK_GL_FBCONFIG_ID )
(define-enum GDK_GL_MAX_PBUFFER_WIDTH )
(define-enum GDK_GL_MAX_PBUFFER_HEIGHT )
(define-enum GDK_GL_MAX_PBUFFER_PIXELS )
(define-enum GDK_GL_VISUAL_ID )

(define-enum GDK_GL_SAMPLE_BUFFERS )
(define-enum GDK_GL_SAMPLES )

;; Error return values from get-config.
(define-enum GDK_GL_BAD_SCREEN )
(define-enum GDK_GL_BAD_ATTRIBUTE )
(define-enum GDK_GL_NO_EXTENSION )
(define-enum GDK_GL_BAD_VISUAL )
(define-enum GDK_GL_BAD_CONTEXT )
(define-enum GDK_GL_BAD_VALUE )
(define-enum GDK_GL_BAD_ENUM )

;; FBConfig attribute values

(define-enum GDK_GL_DONT_CARE )
(define-enum GDK_GL_RGBA_BIT )
(define-enum GDK_GL_COLOR_INDEX_BIT )
(define-enum GDK_GL_WINDOW_BIT )
(define-enum GDK_GL_PIXMAP_BIT )
(define-enum GDK_GL_PBUFFER_BIT )
(define-enum GDK_GL_NONE )
(define-enum GDK_GL_SLOW_CONFIG )
(define-enum GDK_GL_NON_CONFORMANT_CONFIG )
(define-enum GDK_GL_TRUE_COLOR )
(define-enum GDK_GL_DIRECT_COLOR )
(define-enum GDK_GL_PSEUDO_COLOR )
(define-enum GDK_GL_STATIC_COLOR )
(define-enum GDK_GL_GRAY_SCALE )
(define-enum GDK_GL_STATIC_GRAY )
(define-enum  GDK_GL_TRANSPARENT_RGB )
(define-enum GDK_GL_TRANSPARENT_INDEX )
(define-enum GDK_GL_PRESERVED_CONTENTS )
(define-enum GDK_GL_LARGEST_PBUFFER )
(define-enum GDK_GL_PBUFFER_HEIGHT )
(define-enum GDK_GL_PBUFFER_WIDTH )
(define-enum GDK_GL_WIDTH )
(define-enum GDK_GL_HEIGHT )
(define-enum GDK_GL_EVENT_MASK )
(define-enum GDK_GL_RGBA_TYPE )
(define-enum GDK_GL_COLOR_INDEX_TYPE )
(define-enum  GDK_GL_SCREEN )
(define-enum GDK_GL_PBUFFER_CLOBBER_MASK )
(define-enum GDK_GL_DAMAGED )
(define-enum GDK_GL_SAVED )
(define-enum GDK_GL_WINDOW )
(define-enum GDK_GL_PBUFFER )
(define-enum GDK_GL_FRONT_LEFT_BUFFER_BIT )
(define-enum GDK_GL_FRONT_RIGHT_BUFFER_BIT )
(define-enum GDK_GL_BACK_LEFT_BUFFER_BIT )
(define-enum GDK_GL_BACK_RIGHT_BUFFER_BIT )
(define-enum GDK_GL_AUX_BUFFERS_BIT )
(define-enum GDK_GL_DEPTH_BUFFER_BIT )
(define-enum GDK_GL_STENCIL_BUFFER_BIT )
(define-enum GDK_GL_ACCUM_BUFFER_BIT )

;(define-enum GDK_GL_X_VISUAL_TYPE_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_TRANSPARENT_TYPE_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_TRANSPARENT_INDEX_VALUE_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_TRANSPARENT_RED_VALUE_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_TRANSPARENT_GREEN_VALUE_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_TRANSPARENT_BLUE_VALUE_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_TRANSPARENT_ALPHA_VALUE_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_TRUE_COLOR_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_DIRECT_COLOR_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_PSEUDO_COLOR_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_STATIC_COLOR_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_GRAY_SCALE_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_STATIC_GRAY_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_NONE_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_TRANSPARENT_RGB_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_TRANSPARENT_INDEX_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_VISUAL_CAVEAT_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_SLOW_VISUAL_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_NON_CONFORMANT_VISUAL_EXT );removed @ gtkglext0.7

;; for get-cilent-string
;(define-enum GDK_GL_VENDOR );removed @ gtkglext0.7
;(define-enum GDK_GL_VERSION );removed @ gtkglext0.7
;(define-enum GDK_GL_EXTENSIONS );removed @ gtkglext0.7

;(define-enum GDK_GL_SHARE_CONTEXT_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_VISUAL_ID_EXT );removed @ gtkglext0.7
;(define-enum GDK_GL_SCREEN_EXT );removed @ gtkglext0.7

;;=================================================================
;; gdkglversion.h
;;

(define-cproc gdk-gl-ext-check-version (major::<int> minor::<int> micor::<int>)
  (call <boolean> "GDKGLEXT_CHECK_VERSION"))

;;=================================================================
;; gdkglwindow.h
;;

(define-cclass <gdk-gl-window> "GdkGLWindow*"
  "Scm_GdkGLWindowClass"
  ("Scm_GdkGLDrawableClass" "Scm_GObjectClass")
  (;;(glconfig       :type <gdk-gl-config> :setter #f);removed @ gtkglext0.7
   (drawable       :type <gdk-drawable>  :setter #f))
  )

(initcode "Scm_GtkRegisterClass(GDK_TYPE_GL_WINDOW, SCM_CLASS_GDK_GL_WINDOW);")

(define-cproc gdk-gl-window-new (glconfig::<gdk-gl-config>
                                 window::<gdk-drawable>
                                 attrib::<list>)
  "int *alist = Scm_ListToGdkGLAttribList(attrib);
  SCM_RETURN(SCM_MAKE_GDK_GL_WINDOW(gdk_gl_window_new(glconfig, window, alist)));")

(define-cproc gdk-gl-window-get-window (glwindow::<gdk-gl-window>)
  (call <gdk-drawable> "gdk_gl_window_get_window"))

(define-cproc gdk-window-set-gl-capability (window::<gdk-drawable>
                                            glconfig::<gdk-gl-config>
                                            attrib::<list>)
  "int *alist = Scm_ListToGdkGLAttribList(attrib);
  SCM_RETURN(SCM_MAKE_GDK_GL_WINDOW(gdk_window_set_gl_capability(window, glconfig,alist)));")

(define-cproc gdk-window-usnet-gl-capability (window::<gdk-drawable>)
  (call <void> "gdk_window_unset_gl_capability"))

(define-cproc gdk-window-is-gl-capable (window::<gdk-drawable>)
  (call <boolean> "gdk_window_is_gl_capable"))

(define-cproc gdk-window-get-gl-window (window::<gdk-drawable>)
  (call <gdk-gl-window> "gdk_window_get_gl_window"))

(define-cproc gdk-window-get-gl-drawable (window::<gdk-drawable>)
  (call <gdk-gl-drawable> "gdk_window_get_gl_drawable"))


;; Local variables:
;; mode: scheme
;; end:
